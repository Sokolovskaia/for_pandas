""" ТЕТРАДЬ++++++"""

import pandas as pd
import numpy as np


df_1_c = pd.DataFrame({
    'col_1': [5, 6, np.nan, 3, 7],
    'col_2': [27, 6, 7, 40, 70],
    'col_3': [1, 45, 6, 62, 7]},
    index=['row_1', 'row_2', 'row_3', 'row_4', 'row_5'])

df_2_c = pd.DataFrame({
    'col_1': [5, 6, 7, np.nan, 3],
    'col_2': [27, 6, 7, 4, 7],
    'col_3': [1, 45, 6, 62, 7]},
    index=['row_1', 'row_2', 'row_3', 'row_4', 'row_5'])

series_c = pd.Series(
    [5, 6, np.nan, 1, 7],
    index=['row_10', 'col_2', 'row_3', 'row_4', 'row_5'])

series_c_2 = pd.Series(
    [5, 6, np.nan, 1, 7],
    index=['row_10', 'col_1', 'row_3', 'row_4', 'row_5'])

"""
np.nan == np.nan ===> False
любое сравние с np.nan возвращает False
"""

"""     Операции сравнения для СЕРИИ
Сравнение числа с серией. Число сравнивается с каждым значением серии """

# print(series_c == 5)
# print(series_c >= 5)
# print(series_c > [1, 2, 3, 4, 5])   #   кол-во элементов в списке должно совпадать с кол-во элементов в Серии
# print(series_c == series_c)]

# print(series_c > df_1_c['col_1'])  # НЕ БУДЕТ РАБОТАТЬ

# print(df_1_c['col_1'] <= df_1_c['col_2'] )



"""     Операции сравнения для DF   """


# print(df_1_c == 6)
# print(df_1_c > [1, 3, 10])      #   Кол-во значений в списке д.б. равно кол-ву столбцов в ДФ
# print(df_1_c == df_2_c)     #       Индексы должны СОВПАДАТЬ как по строкам, так и по столбцам
# print(df_1_c == df_2_c[['col_2', 'col_1', 'col_3']])    #   ошибка, не совпадают имена столбцов

"""
МЕТОДЫ ДЛЯ ОПЕРАЦИЙ СРАВНЕНИЯ:

eq() ---> ==
ne() ---> !=
le() ---> <=
lt() ---> <
ge() ---> >=
gt() ---> >
"""

# print(df_1_c, end='\n'*2)
# print(series_c, end='\n'*2)

# print(df_1_c.le(6))
# print(df_1_c.le([10, 2, 3]))
# print(series_c.le(df_1_c['col_3']))       #   индексы СТРОК могут быть РАЗНЫМИ, выравнивание в начале, потом сравнение
# print(df_1_c.le(df_2_c[['col_2', 'col_1']]))  # в начале выравнивание, потом сравнение по индексам, там где не совпадают индексы - False

"""     Аргумент axis=.....     """
print(df_1_c.le([10, 20, 30, 7, 8], axis=0))        #   По СТРОКАМ

"""     Метод equals()      
значение Nan с одинаковыми индесами рассматриваются как равные.
Индексы строк и столбцов д.б. ОДИНАКОВЫМИ и в одинаковом порядке

"""

# print(df_1_c.equals(df_1_c))  #   True
# print(df_1_c.equals(df_1_c[['col_2', 'col_1', 'col_3']]))     # False
# print(df_1_c.equals(df_2_c))     # False
# print(series_c.equals(series_c))     # True


"""     ЗАДАЧИ      """
new_ser = series_c.ge(series_c_2)
# print(new_ser)


df_11 = pd.DataFrame({'age': [19, 20, 23, 24], 'стаж работы': [3, 4, 5, 6], 'зарплата': [60000, 70000, 80000, 90000]})
ser_11 = pd.Series([5, 22.2, 80000], index=['средний стаж работы', 'средний возраст', 'средняя зарплата'])
# new_df = df_11.gt([ser_11['средний возраст'], ser_11['средний стаж работы'], ser_11['средняя зарплата']])
new_df = df_11.gt(ser_11[['средний возраст', 'средний стаж работы', 'средняя зарплата']].to_list())

ser_1 = pd.Series(
    [31, 23, 72, 94, 77],
    index=['Имя_0', 'Имя_1', 'Имя_2', 'Имя_3', 'Имя_4'])    # нерешенные

ser_2 = pd.Series(
    [85, 50, 52, 72, 85],
    index=['Имя_0', 'Имя_1', 'Имя_2', 'Имя_3', 'Имя_4'])        #   решенные

mask = ser_2.lt(ser_1)
print(mask)
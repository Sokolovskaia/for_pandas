import pandas as pd
import numpy as np


"""     Фильтрация данных   """

dict_array_q = {'age': [53, 37, 11, 18, 7], 'name': ['Сергей', 'Маша', 'Ксюша', 'Аристарх', 'Соня'], 'наличие авто': [True, True, False, True, False]}
df_q = pd.DataFrame(dict_array_q)
series_q = pd.Series([10, 20, 30, np.nan, 50], name='ages')

"""     Фильтрация с помощью списка с bool значениями"""

for_print_1 = df_q[[True, False, True, False, True]]   #   Должно соответствовать кол-ву строк
# for_print_2 = series_q[[True, False, True, False, True]]

"""     Фильтрация с помощью Series/столбца с bool значением"""

for_print_3 = df_q[df_q['наличие авто']]

"""     Фильтрация по логическому условию   """

# for_print_4 = df_q['age'] <= 11
for_print_4 = df_q['age'].le(11)

# for_print_5 = df_q[df_q['age'] <= 11]
for_print_5 = df_q[df_q['age'].le(11)]

"""     НЕЛЬЗЯ использовать логические операторы and, or, not.
Вместо них нужно использовать битовые операции:

~ ---> not
& ---> and
| ---> or 

Приоритет использования: ~ & | (==; >; <; != и тд)
все, что в скобках выполняется в первую очередь

"""
# for_print_6 = df_q[(df_q['age'] <= 18) & df_q['наличие авто']]
for_print_6 = df_q[(df_q['age'].le(18)) & df_q['наличие авто']]

# for_print_7 = df_q[(df_q['age'] > 18) & df_q['наличие авто']]
for_print_7 = df_q[(df_q['age'].gt(18)) & df_q['наличие авто']]

# for_print_8 = df_q[(df_q['age'] == 18) | ~ df_q['наличие авто']]
for_print_8 = df_q[(df_q['age'].eq(18)) | ~ df_q['наличие авто']]   #   Ровно 18 или нет авто


"""  Метод isin()   """
# for_print_9 = df_q.isin([53, 'Ксюша'])
for_print_10 = df_q['age'].isin([53, 18, 7, 1000])
for_print_11 = df_q[df_q['age'].isin([53, 18, 7, 1000])]

"""     Метод query()
Логичесаие операторы (not, and, or) и операторы сравнения (==, <, > и тд.) используются стандартно.
Приоритет:  операторы сравнение -> not -> and -> or. 
Используются только названия столбцов.
Можно ссылаться на имена столбцов, к-ые не являются допустимыми именами, используя обратные кавычки

"""

for_print_12 = df_q.query('not `наличие авто` and age < 10')

"""     Использование переменных в запросе   (перед переменной ставится знак @   """
N = 5

for_print_13 = df_q.query('not `наличие авто` and age < 3*@N')



"""      ЗАДАЧИ     """
df_11_q = pd.DataFrame(
    {'год рождения': [188, 189, 90, 93],
     'стаж работы': [3.25, 4.5, 5.75, 6.25],
     'зарплата': [60000, 70000, 80000, 90000]})

# print(df_11_q[df_11_q['стаж работы'] > 5])

# print(df_11_q.query('`стаж работы` > 4 and `зарплата` < 95000'))

# print(df_11_q.query('`год рождения` > 91 and `зарплата` != 80000'))

# print(df_11_q.query('`год рождения` >= 91 or `зарплата` < 70000'))

# print(df_11_q[(df_11_q['год рождения'] >= 91) | (df_11_q['зарплата'] < 70000)])


# print(df_11_q[(df_11_q['год рождения'] >= 91) & df_11_q['стаж работы'].isin([4.5, 5.75, 6.25])])

# print(df_11_q.query('`стаж работы` <= 4'))

# print(df_11_q.query('`стаж работы` <= 5 and `зарплата` > 65000'))

# print(df_11_q.query('`год рождения` <= 91 or `зарплата` > 70000'))

# print(df_11_q)
# print(df_11_q[df_11_q['год рождения'].gt(100)])
# new_df = df_11_q[df_11_q['год рождения'].gt(100)]
# new_ser = pd.Series(new_df['год рождения']).to_list()



# print(new_df_1)


""" stud_list = pd.Series((df[df['Решено'].gt(100)])['Решено']).to_list() """

df_33 = pd.DataFrame({'Решено': [93, 63, 78, 156, 120]}, index=['Имя_1', 'Имя_2', 'Имя_3', 'Имя_4', 'Имя_5'])
"""
df_44 = df_33[df_33['Решено'].gt(100)]
df_55 = df_44.index.to_list()
print(df_55)
"""

df_66 = df_33[df_33['Решено'].gt(100)].index.to_list()
print(df_66)